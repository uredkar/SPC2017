/// <reference path="../../tsd.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var dropdown_1 = require('./dropdown');
var KeyboardNav = (function () {
    function KeyboardNav(dd, el) {
        this.dd = dd;
        this.el = el;
        console.warn('keyboard-nav deprecated');
        dd.keyboardNav = true;
    }
    KeyboardNav.prototype.onKeydown = function (event) {
        if (event.which !== 40 && event.which !== 38) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        var elems = this.dd.menuEl.nativeElement.getElementsByTagName('a');
        switch (event.which) {
            case (40):
                if (typeof this.dd.selectedOption !== 'number') {
                    this.dd.selectedOption = 0;
                    break;
                }
                if (this.dd.selectedOption === elems.length - 1) {
                    break;
                }
                this.dd.selectedOption++;
                break;
            case (38):
                if (typeof this.dd.selectedOption !== 'number') {
                    return;
                }
                if (this.dd.selectedOption === 0) {
                    break;
                }
                this.dd.selectedOption--;
                break;
        }
        elems[this.dd.selectedOption].nativeElement.focus();
    };
    KeyboardNav = __decorate([
        angular2_1.Directive({
            selector: '[dropdown][keyboard-nav]',
            host: {
                '(keydown)': 'onKeydown($event)'
            }
        }), 
        __metadata('design:paramtypes', [dropdown_1.Dropdown, angular2_1.ElementRef])
    ], KeyboardNav);
    return KeyboardNav;
})();
exports.KeyboardNav = KeyboardNav;
//# sourceMappingURL=../../components/dist/dropdown/dropdown-keyboard-nav.js.map